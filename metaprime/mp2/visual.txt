# Parameters for the visual stimulus
inner_ratio = 0.5
mask_sf = 5                       # Width of Gaussian wave at the center in degrees
prime_sf = mask_sf * inner_ratio
mask_size = 256       # Resolution of the mask in pixels
prime_size = int(mask_size * inner_ratio)
mask_contrast = 0.75
prime_contrast = 0.3

def create_mask_inner(resolution, mask_inner):
    x, y = np.meshgrid(
        np.linspace(-1, 1, resolution),
        np.linspace(-1, 1, resolution)
    )
    r = np.sqrt(x**2 + y**2)  # Radial distance
    # Gaussian blur at the center
    blurred_region = np.exp(-((r /  mask_inner) ** 2))
    blurred_region[r >  mask_inner] = 0  # Outside the blur radius is set to 0
    return blurred_region

def create_grating(resolution, spatial_frequency): 
    x = np.linspace(-np.pi, np.pi, resolution)
    sinusoidal = np.sin(spatial_frequency * x)  # 1D sinusoidal wave
    return np.outer(sinusoidal, np.ones_like(sinusoidal))  # Extend to 2D

def combine(mask_inner, mask_outer):
    combined = 2 * mask_inner + mask_outer
    combined = 2 * (combined - np.min(combined)) / (np.max(combined) - np.min(combined)) - 1
    return combined

mask_inner = create_mask_inner(mask_size, inner_ratio)
mask_outer = create_grating(mask_size, mask_sf)

mask = combine(mask_inner, mask_outer) * mask_contrast
prime = (2 * (prime - np.min(prime)) / (np.max(prime) - np.min(prime)) - 1) * prime_contrast

# Create a PsychoPy ImageStim
mask_left = visual.ImageStim(
    win,
    image= mask,
    size=mask_size,  # Match the resolution
    units="pix",
    interpolate=True,  # Smooth rendering
    colorSpace="rgb",  # Ensure the range is [-1, 1]
    mask='circle',
    ori=-30
)

mask_right = visual.ImageStim(
    win,
    image= mask,
    size=mask_size,  # Match the resolution
    units="pix",
    interpolate=True,  # Smooth rendering
    colorSpace="rgb",  # Ensure the range is [-1, 1]
    mask='circle',
    ori=30
)

prime_left = visual.ImageStim(
    win,
    image= prime,
    size=prime_size,  # Match the resolution
    units="pix",
    interpolate=True,  # Smooth rendering
    colorSpace="rgb",  # Ensure the range is [-1, 1]
    mask='circle',
    ori=-30
)

prime_right = visual.ImageStim(
    win,
    image= prime,
    size=prime_size,  # Match the resolution
    units="pix",
    interpolate=True,  # Smooth rendering
    colorSpace="rgb",  # Ensure the range is [-1, 1]
    mask='circle',
    ori=30
)

